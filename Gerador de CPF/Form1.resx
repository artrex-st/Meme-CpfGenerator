<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        QmCC
</value>
  </data>
</root>